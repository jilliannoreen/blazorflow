<style>
    /* Autofill fix: adjust label position when input is autofilled */
    /* Small outlined/text input autofill adjustment */
    input.sm-input:-webkit-autofill + label {
        transform: translateY(-22px);

    }
    /* Small filled input autofill adjustment */
    input.sm-input-filled:-webkit-autofill + label {
        transform: translateY(-1rem);
    }
    /* Medium and large inputs (outlined, text, filled) autofill adjustment */
    input.md-input:-webkit-autofill + label,
    input.lg-input:-webkit-autofill + label,
    input.md-input-filled:-webkit-autofill + label,
    input.lg-input-filled:-webkit-autofill + label {
        transform: translateY(-1.25rem);
    }
</style>

<div class="@InputWrapperClass">
    <div class="relative">
        @if (VisualPlacement == Enums.VisualPlacement.Start)
        {
            <span class="@GetIconClass">
                <Icon SvgIcon="@(HasError ? Icons.Icons.Outlined.Error : Icon)" Size="@IconSize"></Icon>
            </span>
        }

        <input @ref="_inputElementRef"
               @bind:get="Value"
               @bind:set="HandleDebouncedInputFromJs"
               @bind:event="@((Immediate ? "oninput" : "onchange"))"
               type="@Type.ToString()"
               id="@Id"
               placeholder="@PlaceholderValue"
               class="@InputClass"
               disabled="@Disabled"
               readonly="@ReadOnly"
               aria-invalid="@ValidationMessages.Any()"
               autocomplete="@AutoComplete"
               aria-describedby="@AriaDescribedById"
               @attributes="UserAttributes"/>

        @if (VisualPlacement == Enums.VisualPlacement.End || HasError)
        {
            <span class="@GetIconClass">
                <Icon SvgIcon="@(HasError ? Icons.Icons.Outlined.Error : Icon)" Size="@IconSize"></Icon>
            </span>
        }

        <label for="@Id" class="@LabelClass">@Label</label>
    </div>

    @if (HasError)
    {
        <p id="@($"{Id}-error")" class="my-2 text-xs text-red-600 dark:text-red-400">
            @(ErrorText ?? ValidationMessages.FirstOrDefault())
        </p>
    }
    else if (!string.IsNullOrWhiteSpace(HelperText))
    {
        <p id="@($"{Id}-helper-text")" class="my-2 text-xs text-gray-500 dark:text-gray-400">
            @HelperText
        </p>
    }
    
</div>
